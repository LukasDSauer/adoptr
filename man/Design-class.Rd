% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Design.R
\docType{class}
\name{Design-class}
\alias{Design-class}
\alias{early_stopping_bounds}
\alias{n2}
\alias{n}
\alias{c2}
\alias{early_stopping_bounds,Design-method}
\alias{n2,Design,numeric-method}
\alias{c2,Design,numeric-method}
\alias{n,Design,numeric-method}
\alias{as.numeric,Design-method}
\alias{update,Design-method}
\title{Two-stage design}
\usage{
early_stopping_bounds(d, ...)

n2(d, x1, ...)

n(d, x1, ...)

c2(d, x1, ...)

\S4method{early_stopping_bounds}{Design}(d, ...)

\S4method{n2}{Design,numeric}(d, x1, ...)

\S4method{c2}{Design,numeric}(d, x1, ...)

\S4method{n}{Design,numeric}(d, x1, ...)

\S4method{as.numeric}{Design}(x)

\S4method{update}{Design}(object)
}
\arguments{
\item{d}{\code{Design} object}

\item{...}{further optional arguments}

\item{x1}{stage-one outcome}

\item{x}{\code{Design} object to conver to numeric vector of design parameters.}

\item{object}{\code{Design} object to update with new design parameter values}
}
\description{
\code{Design} is a abstract class for representing two-stage designs.
}
\details{
Current main implementation: \code{\link{GQDesign-class}}
[TODO add some details on two-stage designs]
}
\section{Methods (by generic)}{
\itemize{
\item \code{early_stopping_bounds}: must return numeric vector of length two giving early
stopping for futility / efficacy boundaries; must be finite.
Tries to access d@c1f and d@c1e otherwise throws an error.
This means that the method need not be reimplemented as long as
the subclass contains fields c1f and c2e.

\item \code{n2}: stage-two sample size given stage one-outcome, must be implemented.

\item \code{c2}: stage-two critical value given stage-one outcome, must be implemented.

\item \code{n}: overall sample size given stage-one outcome

\item \code{as.numeric}: convert design object to numeric vector of design parameters, must be implemented.

\item \code{update}: convert vector of design parameters to design object of the
same class as \code{object}; inverse to \code{as.numeric}, must be implemented.
}}

