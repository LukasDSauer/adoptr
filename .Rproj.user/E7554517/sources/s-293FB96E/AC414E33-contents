setClass("ESS", representation(prior = "Prior"), contains = "Score")

ESS <- function(prior) {
        new("ESS", prior = prior)
}

setMethod("eval", signature("ESS", "Design"), function(s, design, ...) {
        mass <- cubature::hcubature(
                f = function(x) dnorm(x[1], mean = x[2], sd = 1) * s@prior@p(x[2]),
                lowerLimit = c(-1, -1),
                upperLimit = c(4, 1),
                absError   = 1e-3
        )
        res <- cubature::hcubature(
                f = function(x) n2(design, x[1]) * dnorm(x[1], mean = x[2], sd = 1) * s@prior@p(x[2]),
                lowerLimit = c(-1, -1),
                upperLimit = c(4, 1),
                absError   = .1
        )$integral / mass$integral
        return(res)
})

setClass("ExpectedPower", representation(prior = "Prior"), contains = "Score")

ExpectedPower <- function(prior) {
        new("ExpectedPower", prior = prior)
}

setMethod("eval", signature("ExpectedPower", "Design"), function(s, design, ...) {
        mass <- cubature::hcubature(
                f = function(x) dnorm(x[1], mean = x[2], sd = 1) * s@prior@p(x[2]),
                lowerLimit = c(-1, -1),
                upperLimit = c(4, 1),
                absError   = 1e-3
        )
        res <- cubature::hcubature(
                f = function(x) (1 - pnorm(c2(design, x[1]) - sqrt(n2(design, x[1])))) * dnorm(x[1], mean = x[2], sd = 1) * s@prior@p(x[2]),
                lowerLimit = c(-1, -1),
                upperLimit = c(4, 1),
                absError   = .1
        )$integral / mass$integral
        return(res)
})
